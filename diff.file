diff --git a/server/routes/chatRoutes.js b/server/routes/chatRoutes.js
index f07f062..5b79ba0 100644
--- a/server/routes/chatRoutes.js
+++ b/server/routes/chatRoutes.js
@@ -1,4 +1,4 @@
-// // routes/chatRoutes.js
+
 // const express = require('express');
 // const router = express.Router();
 // const axios = require('axios');
@@ -413,42 +413,174 @@ async function get_shows(query) {
   }
 }
 
+// async function get_realtime_data(query) {
+//   const subscriptionKey = process.env.bingAPIKey || process.env.BING_API_KEY || process.env.BINGAPIKEY;
+//   const uriBase = "https://api.bing.microsoft.com/v7.0/search";
+//   const searchTerm = encodeURIComponent(query || "");
+//   const url = `${uriBase}?q=${searchTerm}&count=20&mkt=en-US`;
+
+//   if (!subscriptionKey) {
+//     console.error('[BING] Missing API key. Set env var bingAPIKey or BING_API_KEY. Query=', query);
+//     return 'Error: Bing API key is not configured on the server.';
+//   }
+
+//   try {
+//     console.log(`[BING] GET ${url}`);
+//     const response = await axios.get(url, {
+//       headers: { 'Ocp-Apim-Subscription-Key': subscriptionKey },
+//       timeout: 10000,
+//     });
+
+//     let result = '';
+//     if (response?.data?.webPages?.value) {
+//       response.data.webPages.value.forEach((webPage) => {
+//         result += `Name: ${webPage.name}\n`;
+//         result += `Snippet: ${webPage.snippet}\n\n`;
+//       });
+//     }
+//     console.log(`[BING] Results: ${response?.data?.webPages?.value?.length || 0} items`);
+//     return result || 'No results found.';
+//   } catch (error) {
+//     const status = error.response?.status;
+//     const data = error.response?.data;
+//     console.error('[BING] Error', { status, data, message: error.message });
+//     return `Error fetching search results: ${status || ''}`.trim();
+//   }
+// }
+
+// Perplexity-based realtime data function (above bing api version deprecated)
+
 async function get_realtime_data(query) {
-  const subscriptionKey = process.env.bingAPIKey || process.env.BING_API_KEY || process.env.BINGAPIKEY;
-  const uriBase = "https://api.bing.microsoft.com/v7.0/search";
-  const searchTerm = encodeURIComponent(query || "");
-  const url = `${uriBase}?q=${searchTerm}&count=20&mkt=en-US`;
-
-  if (!subscriptionKey) {
-    console.error('[BING] Missing API key. Set env var bingAPIKey or BING_API_KEY. Query=', query);
-    return 'Error: Bing API key is not configured on the server.';
+  const apiKey = process.env.PERPLEXITY_API_KEY;
+  if (!apiKey) {
+    console.error('[PPLX] Missing perplexityAPIKey');
+    return 'Error: Perplexity API key is not configured on the server.';
   }
 
   try {
-    console.log(`[BING] GET ${url}`);
-    const response = await axios.get(url, {
-      headers: { 'Ocp-Apim-Subscription-Key': subscriptionKey },
-      timeout: 10000,
-    });
+    console.log('[PPLX] live search HIT', { query: String(query || '').slice(0, 160) });
+    const system = [
+      'You are a research assistant with live web access. Perform real-time public web search and aggregate findings.',
+      'Return up to 10 items with EXACTLY this text-only structure per item and DO NOT deviate:',
+      'Name: <title>\\nLink: <https url>\\nSnippet: <concise summary>\\n',
+      'Links are MANDATORY; if no credible source URL is available, omit the item. Keep output concise for TTS; avoid boilerplate like Read more.'
+    ].join(' ');
+
+    const model = process.env.PPLX_MODEL || 'sonar-pro';
+    const payload = {
+      model,
+      temperature: 0.2,
+      return_citations: true, // ask API to include citations if available
+      messages: [
+        { role: 'system', content: system },
+        { role: 'user', content: String(query || '').slice(0, 4000) }
+      ],
+    };
 
-    let result = '';
-    if (response?.data?.webPages?.value) {
-      response.data.webPages.value.forEach((webPage) => {
-        result += `Name: ${webPage.name}\n`;
-        result += `Snippet: ${webPage.snippet}\n\n`;
-      });
+    const resp = await axios.post(
+      'https://api.perplexity.ai/chat/completions',
+      payload,
+      {
+        headers: {
+          'Authorization': `Bearer ${apiKey}`,
+          'Content-Type': 'application/json',
+        },
+        timeout: 20000,
+      }
+    );
+
+    let text = resp?.data?.choices?.[0]?.message?.content?.trim();
+    let citations = resp?.data?.citations || resp?.data?.choices?.[0]?.message?.citations || [];
+    const hasLinksInText = /https?:\/\//i.test(text || '');
+    console.log('[PPLX] live search RESULT preview:', text ? text.slice(0, 400) : text, 'model=', model, 'citations=', Array.isArray(citations) ? citations.length : 0);
+
+    if (!hasLinksInText && Array.isArray(citations) && citations.length) {
+      // Build a link block compatible with our UI parsing
+      const citeBlock = citations.slice(0, 10).map((u, idx) => {
+        const url = typeof u === 'string' ? u : (u?.url || '');
+        if (!url) return '';
+        return `Name: Source ${idx + 1}\nLink: ${url}\nSnippet: See source.\n`;
+      }).filter(Boolean).join('\n');
+      text = text ? `${text}\n\n${citeBlock}` : citeBlock;
+    }
+
+    // Retry once with a stricter instruction if we still have no links and no citations
+    if (!/https?:\/\//i.test(text || '') && (!Array.isArray(citations) || citations.length === 0)) {
+      console.warn('[PPLX] No links/citations. Retrying with stricter prompt.');
+      const strictSystem = [
+        'You MUST return up to 8 findings. Each finding MUST include a valid https URL on a separate line labeled Link: and a one-sentence Snippet.',
+        'Output format per item is EXACTLY:',
+        'Name: <title>\nLink: <https url>\nSnippet: <concise summary>\n',
+        'Do not include items without a credible source URL.'
+      ].join(' ');
+      const retryPayload = { ...payload, messages: [{ role: 'system', content: strictSystem }, { role: 'user', content: String(query || '').slice(0, 4000) }] };
+      const retry = await axios.post('https://api.perplexity.ai/chat/completions', retryPayload, { headers: payload.headers || { 'Authorization': `Bearer ${apiKey}`, 'Content-Type': 'application/json' }, timeout: 20000 });
+      const retryText = retry?.data?.choices?.[0]?.message?.content?.trim();
+      const retryCites = retry?.data?.citations || retry?.data?.choices?.[0]?.message?.citations || [];
+      let finalText = retryText;
+      if (!/https?:\/\//i.test(finalText || '') && Array.isArray(retryCites) && retryCites.length) {
+        const block = retryCites.slice(0, 8).map((u, idx) => {
+          const url = typeof u === 'string' ? u : (u?.url || '');
+          if (!url) return '';
+          return `Name: Source ${idx + 1}\nLink: ${url}\nSnippet: See source.\n`;
+        }).filter(Boolean).join('\n');
+        finalText = finalText ? `${finalText}\n\n${block}` : block;
+      }
+      if (finalText) text = finalText;
     }
-    console.log(`[BING] Results: ${response?.data?.webPages?.value?.length || 0} items`);
-    return result || 'No results found.';
+
+    if (!text) text = 'No results found.';
+
+    // Post-validate links: keep only reachable https URLs, drop dead links
+    try {
+      const blockRegex = /Name:\s*(.*)\nLink:\s*(\S+)\nSnippet:\s*([\s\S]*?)(?=\n\n|$)/g;
+      const entries = [];
+      let m;
+      while ((m = blockRegex.exec(text)) !== null) {
+        entries.push({ name: m[1].trim(), url: m[2].trim(), snippet: m[3].trim() });
+      }
+
+      if (entries.length) {
+        const validate = async (u) => {
+          try {
+            let url = new URL(u);
+            if (url.protocol !== 'https:') {
+              // try upgrading to https
+              url = new URL(u.replace(/^http:/, 'https:'));
+            }
+            const resp = await axios.get(url.href, { maxRedirects: 3, timeout: 5000, validateStatus: (s) => s >= 200 && s < 400 });
+            return resp.status < 400 ? url.href : null;
+          } catch {
+            return null;
+          }
+        };
+        const results = await Promise.all(entries.map(e => validate(e.url)));
+        const filtered = entries
+          .map((e, i) => ({ ...e, url: results[i] }))
+          .filter(e => !!e.url)
+          .slice(0, 10);
+        if (filtered.length) {
+          const rebuilt = filtered.map((e) => `Name: ${e.name}\nLink: ${e.url}\nSnippet: ${e.snippet}\n`).join('\n');
+          text = rebuilt; // replace with validated list to avoid dead links
+        } else {
+          console.warn('[PPLX] All links failed validation; returning original text.');
+        }
+      }
+    } catch (e) {
+      console.warn('[PPLX] Link validation error:', e?.message);
+    }
+
+    return text;
   } catch (error) {
     const status = error.response?.status;
     const data = error.response?.data;
-    console.error('[BING] Error', { status, data, message: error.message });
+    console.error('[PPLX] Error', { status, data: typeof data === 'string' ? data.slice(0, 200) : data, message: error.message });
     return `Error fetching search results: ${status || ''}`.trim();
   }
 }
 
 // OpenAI function definitions
+
 const functions = [
   {
     name: 'get_current_weather',
diff --git a/src/App.js b/src/App.js
index 6f7f2f5..36d5d27 100644
--- a/src/App.js
+++ b/src/App.js
@@ -1,6 +1,6 @@
 import React, { useState, useEffect, useRef } from "react";
 import { motion, AnimatePresence } from "framer-motion";
-import { MessageSquare } from "lucide-react";
+import { MessageSquare, Image } from "lucide-react";
 import "./App.css";
 import ModernSidePanel from "./components/ModernSidePanel";
 import ModernConversationOverlay from "./components/ModernConversationOverlay";
@@ -26,6 +26,7 @@ function App() {
   const [sessionImages, setSessionImages] = useState([]);
   const [conversationThumbnails, setConversationThumbnails] = useState({});
   const [currentConversationName, setCurrentConversationName] = useState('');
+  const [isImageSidebarOpen, setIsImageSidebarOpen] = useState(false);
   const responseRef = useRef(null);
 
   // Speech controls are initialized after we get handleGreeting from conversations
@@ -42,6 +43,7 @@ function App() {
     if (imageData && imageData.type === 'image') {
       setGeneratedImage(imageData.content);
       setIsImageModalOpen(false);
+      setIsImageSidebarOpen(true); // Auto-open on generate
       // Add to session images
       const newImage = {
         id: Date.now(),
@@ -189,13 +191,34 @@ function App() {
     setIsOverlayVisible(false);
   };
 
+  // Render URLs as clickable links that open in a new tab
+  const renderTextWithLinks = (text) => {
+    const urlRegex = /(https?:\/\/[^\s]+)/g;
+    return String(text || '').split(urlRegex).map((part, idx) => {
+      if (urlRegex.test(part)) {
+        return (
+          <a
+            key={`lnk-${idx}`}
+            href={part}
+            target="_blank"
+            rel="noopener noreferrer"
+            className="text-blue-400 hover:text-blue-300 underline"
+          >
+            {part}
+          </a>
+        );
+      }
+      return <span key={`txt-${idx}`}>{part}</span>;
+    });
+  };
+
   return (
     <div className="min-h-screen relative overflow-x-hidden">
       {/* Background Effects - semi-transparent gradient over Matrix image */}
       <div className="absolute inset-0 bg-gradient-to-br from-gray-900/30 via-gray-800/40 to-black/60 pointer-events-none" />
 
       {/* Toggle Conversation History Button (top-right, offset when image sidebar present) */}
-      <motion.div className={`fixed top-4 ${sessionImages.length ? 'right-24' : 'right-4'} z-[60]`} whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
+      <motion.div className="fixed top-4 right-4 z-[60]" whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
         <Button
           variant="glass"
           size="icon"
@@ -209,9 +232,32 @@ function App() {
         </Button>
       </motion.div>
 
+      {/* Add toggle if images */}
+      {sessionImages.length > 0 && (
+        <motion.div className="fixed top-16 right-4 z-50" whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
+          <Button
+            variant="glass"
+            size="icon"
+            onClick={() => setIsImageSidebarOpen(!isImageSidebarOpen)}
+            className="bg-black/20 hover:bg-black/40 text-white border-white/20"
+            aria-label="Toggle image sidebar"
+          >
+            <Image className="h-5 w-5" />
+          </Button>
+        </motion.div>
+      )}
+
       <ModernSidePanel
         onSelectConversation={onSelectConversation}
-        onAddConversation={handleAddConversation}
+        onAddConversation={(name) => {
+          const created = handleAddConversation(name);
+          // Clear UI state for a fresh conversation
+          setEnteredText('');
+          setRez('');
+          setGeneratedImage(null);
+          stopSpeakText();
+          return created;
+        }}
         onRenameConversation={handleRenameConversation}
         onDeleteConversation={handleDeleteConversation}
         setThisConversation={setThisConversation}
@@ -244,13 +290,15 @@ function App() {
           setIsImageModalOpen(true);
         }}
         generatedImage={generatedImage}
+        isOpen={isImageSidebarOpen}
+        onClose={() => setIsImageSidebarOpen(false)}
       />
 
       <main className="min-h-screen flex flex-col items-center justify-center p-4 relative z-10">
         {/* Current conversation name */}
         {currentConversationName && (
-          <div className="absolute top-16 left-1/2 -translate-x-1/2 text-white font-bold text-lg text-center max-w-xs break-words">
-            {currentConversationName}
+          <div className="absolute top-3 left-1/2 -translate-x-1/2 text-white font-bold text-lg text-center max-w-xs break-words ellipsis" style={{ fontSize: '12px' }}>
+            {currentConversationName.length > 30 ? currentConversationName.slice(0, 30) + '...' : currentConversationName}
           </div>
         )}
 
@@ -327,7 +375,7 @@ function App() {
             >
               <div className="glass-dark p-6 rounded-xl text-gray-100 text-lg leading-relaxed max-h-96 overflow-y-auto">
                 <div className="whitespace-pre-wrap font-medium">
-                  {rez}
+                  {renderTextWithLinks(rez)}
                 </div>
               </div>
             </motion.div>
diff --git a/src/components/ModernImageSidebar.jsx b/src/components/ModernImageSidebar.jsx
index 8019b12..98defa6 100644
--- a/src/components/ModernImageSidebar.jsx
+++ b/src/components/ModernImageSidebar.jsx
@@ -4,11 +4,11 @@ import { Image as ImageIcon, ChevronLeft, ChevronRight, Download, X } from 'luci
 import { Button } from './ui/Button';
 import { GlassCard } from './ui/Card';
 
-const ModernImageSidebar = ({ sessionImages = [], onImageSelect, generatedImage }) => {
+const ModernImageSidebar = ({ sessionImages, onImageSelect, generatedImage, isOpen, onClose }) => {
     const [isCollapsed, setIsCollapsed] = useState(false);
     const [selectedImageIndex, setSelectedImageIndex] = useState(null);
 
-    if (sessionImages.length === 0) return null;
+    if (!isOpen || sessionImages.length === 0) return null;
 
     const downloadImage = async (imageUrl, prompt) => {
         try {
@@ -38,120 +38,108 @@ const ModernImageSidebar = ({ sessionImages = [], onImageSelect, generatedImage
     };
 
     return (
-        <>
-            {/* Main Sidebar */}
-            <motion.div
-                className="fixed top-4 right-4 h-[calc(100vh-2rem)] z-50"
-                variants={containerVariants}
-                animate={isCollapsed ? "collapsed" : "expanded"}
-                transition={{ duration: 0.3, type: "spring", stiffness: 100 }}
-            >
-                <GlassCard className="h-full flex flex-col relative overflow-hidden">
-                    {/* Header */}
-                    <div className="p-4 border-b border-white/10">
-                        <div className="flex items-center justify-between">
-                            {!isCollapsed && (
-                                <motion.div
-                                    variants={contentVariants}
-                                    animate={isCollapsed ? "collapsed" : "expanded"}
-                                    className="flex items-center gap-2"
-                                >
-                                    <ImageIcon className="h-5 w-5 text-white" />
-                                    <span className="text-white font-medium">Images</span>
-                                    <span className="text-xs text-gray-400 bg-white/10 px-2 py-1 rounded-full">
-                                        {sessionImages.length}
-                                    </span>
-                                </motion.div>
-                            )}
-
+        <AnimatePresence>
+            {isOpen && (
+                <motion.div
+                    initial={{ x: '100%' }}
+                    animate={{ x: 0 }}
+                    exit={{ x: '100%' }}
+                    transition={{ type: 'spring', stiffness: 300, damping: 30 }}
+                    className="fixed top-0 right-0 h-full w-80 bg-black/60 backdrop-blur-md border-l border-white/10 shadow-2xl z-50 overflow-y-auto"
+                >
+                    <GlassCard className="h-full flex flex-col relative overflow-hidden">
+                        {/* Header with close */}
+                        <div className="p-4 border-b border-white/10 flex justify-between items-center">
+                            <div className="flex items-center gap-2">
+                                <ImageIcon className="h-5 w-5 text-white" />
+                                <span className="text-white font-medium">Images</span>
+                                <span className="text-xs text-gray-400 bg-white/10 px-2 py-1 rounded-full">
+                                    {sessionImages.length}
+                                </span>
+                            </div>
                             <Button
                                 variant="ghost"
                                 size="icon"
-                                onClick={() => setIsCollapsed(!isCollapsed)}
-                                className="text-white hover:bg-white/10 flex-shrink-0"
+                                onClick={onClose}
+                                className="text-white hover:bg-white/10 mr-12"
+
                             >
-                                {isCollapsed ? (
-                                    <ChevronLeft className="h-4 w-4" />
-                                ) : (
-                                    <ChevronRight className="h-4 w-4" />
-                                )}
+                                <X className="h-5 w-5" />
                             </Button>
                         </div>
-                    </div>
 
-                    {/* Content */}
-                    {!isCollapsed && (
-                        <motion.div
-                            variants={contentVariants}
-                            animate="expanded"
-                            className="flex-1 overflow-y-auto p-4 space-y-3"
-                        >
-                            {sessionImages.slice().reverse().map((img, index) => (
-                                <motion.div
-                                    key={img.id}
-                                    initial={{ opacity: 0, y: 20 }}
-                                    animate={{ opacity: 1, y: 0 }}
-                                    transition={{ delay: index * 0.1 }}
-                                    className="group relative"
-                                >
-                                    <div className="relative overflow-hidden rounded-lg bg-black/20 aspect-square">
-                                        <img
-                                            src={img.url}
-                                            alt={img.prompt}
-                                            className="w-full h-full object-cover cursor-pointer transition-transform duration-300 group-hover:scale-105"
-                                            onClick={() => {
-                                                onImageSelect(img.url);
-                                                setSelectedImageIndex(sessionImages.length - 1 - index);
-                                            }}
-                                        />
+                        {/* Content */}
+                        {!isCollapsed && (
+                            <motion.div
+                                variants={contentVariants}
+                                animate="expanded"
+                                className="flex-1 overflow-y-auto p-4 space-y-3"
+                            >
+                                {sessionImages.slice().reverse().map((img, index) => (
+                                    <motion.div
+                                        key={img.id}
+                                        initial={{ opacity: 0, y: 20 }}
+                                        animate={{ opacity: 1, y: 0 }}
+                                        transition={{ delay: index * 0.1 }}
+                                        className="group relative"
+                                    >
+                                        <div className="relative overflow-hidden rounded-lg bg-black/20 aspect-square">
+                                            <img
+                                                src={img.url}
+                                                alt={img.prompt}
+                                                className="w-full h-full object-cover cursor-pointer transition-transform duration-300 group-hover:scale-105"
+                                                onClick={() => {
+                                                    onImageSelect(img.url);
+                                                    setSelectedImageIndex(sessionImages.length - 1 - index);
+                                                }}
+                                            />
 
-                                        {/* Overlay with actions */}
-                                        <div className="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
-                                            <div className="flex gap-2">
-                                                <Button
-                                                    variant="ghost"
-                                                    size="icon"
-                                                    onClick={(e) => {
-                                                        e.stopPropagation();
-                                                        onImageSelect(img.url);
-                                                    }}
-                                                    className="bg-white/10 hover:bg-white/20 text-white"
-                                                >
-                                                    <ImageIcon className="h-4 w-4" />
-                                                </Button>
-                                                <Button
-                                                    variant="ghost"
-                                                    size="icon"
-                                                    onClick={(e) => {
-                                                        e.stopPropagation();
-                                                        downloadImage(img.url, img.prompt);
-                                                    }}
-                                                    className="bg-white/10 hover:bg-white/20 text-white"
-                                                >
-                                                    <Download className="h-4 w-4" />
-                                                </Button>
+                                            {/* Overlay with actions */}
+                                            <div className="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
+                                                <div className="flex gap-2">
+                                                    <Button
+                                                        variant="ghost"
+                                                        size="icon"
+                                                        onClick={(e) => {
+                                                            e.stopPropagation();
+                                                            onImageSelect(img.url);
+                                                        }}
+                                                        className="bg-white/10 hover:bg-white/20 text-white"
+                                                    >
+                                                        <ImageIcon className="h-4 w-4" />
+                                                    </Button>
+                                                    <Button
+                                                        variant="ghost"
+                                                        size="icon"
+                                                        onClick={(e) => {
+                                                            e.stopPropagation();
+                                                            downloadImage(img.url, img.prompt);
+                                                        }}
+                                                        className="bg-white/10 hover:bg-white/20 text-white"
+                                                    >
+                                                        <Download className="h-4 w-4" />
+                                                    </Button>
+                                                </div>
                                             </div>
                                         </div>
-                                    </div>
 
-                                    {/* Prompt text */}
-                                    <div className="mt-2">
-                                        <p className="text-xs text-gray-300 line-clamp-2 leading-relaxed">
-                                            {img.prompt}
-                                        </p>
-                                        <p className="text-xs text-gray-500 mt-1">
-                                            {new Date(img.timestamp).toLocaleTimeString()}
-                                        </p>
-                                    </div>
-                                </motion.div>
-                            ))}
-                        </motion.div>
-                    )}
-                </GlassCard>
-            </motion.div>
-
-            {/* Full Screen Image Modal moved to App so sidebar doesn't auto-open */}
-        </>
+                                        {/* Prompt text */}
+                                        <div className="mt-2">
+                                            <p className="text-xs text-gray-300 line-clamp-2 leading-relaxed">
+                                                {img.prompt}
+                                            </p>
+                                            <p className="text-xs text-gray-500 mt-1">
+                                                {new Date(img.timestamp).toLocaleTimeString()}
+                                            </p>
+                                        </div>
+                                    </motion.div>
+                                ))}
+                            </motion.div>
+                        )}
+                    </GlassCard>
+                </motion.div>
+            )}
+        </AnimatePresence>
     );
 };
 
diff --git a/src/components/ModernSidePanel.jsx b/src/components/ModernSidePanel.jsx
index 05fb8d7..f7aab03 100644
--- a/src/components/ModernSidePanel.jsx
+++ b/src/components/ModernSidePanel.jsx
@@ -88,22 +88,6 @@ const ModernSidePanel = ({
                 </Button>
             </motion.div>
 
-            {/* Mirror Menu Button (right) for easier access on mobile */}
-            <motion.div
-                className="fixed top-4 right-4 z-50"
-                whileHover={{ scale: 1.05 }}
-                whileTap={{ scale: 0.95 }}
-            >
-                <Button
-                    variant="glass"
-                    size="icon"
-                    onClick={togglePanel}
-                    className="bg-black/20 hover:bg-black/40 text-white border-white/20"
-                >
-                    <Menu className="h-5 w-5" />
-                </Button>
-            </motion.div>
-
             {/* Overlay: click outside closes (all viewports) */}
             <AnimatePresence>
                 {isOpen && (
diff --git a/src/hooks/useConversations.js b/src/hooks/useConversations.js
index 3c0886d..d42ea61 100644
--- a/src/hooks/useConversations.js
+++ b/src/hooks/useConversations.js
@@ -113,13 +113,24 @@ export const useConversations = (apiKey, setRez, handleResponse) => {
         addDebugLog(`Created and selected conversation: ${currentConversation.id}`);
       }
 
-      // Append question locally
+      // Append question locally (timestamps are NOT stored in history)
       let updatedHistory = currentConversation.history ? `${currentConversation.history} Question: ${theStuff}` : `Question: ${theStuff}`;
       let updatedConversation = { ...currentConversation, history: updatedHistory };
 
-      // Send request
+      // Send request with a CURRENT timestamp used ONLY for model reasoning (not persisted)
+      const currentIsoTimestamp = new Date().toISOString();
+      const instruction = [
+        'Text before this sentence is conversation history so far between you and me.',
+        'The following ISO-8601 timestamp is the ACTUAL current date/time and should be treated as ground truth for any time-sensitive reasoning:',
+        `TIMESTAMP: ${currentIsoTimestamp}`,
+        'Do NOT include the timestamp in your response or repeat it back. Use it only for context.',
+        'If the user asks for current information or a web search, use the available functions to fetch up-to-date data, then summarize clearly.',
+        'Keep responses concise and suitable for text-to-speech.'
+      ].join(' ');
+
+      // Important: timestamps are NOT added to updatedHistory, only into the instruction sent to the model
       const payload = {
-        text: `${updatedHistory} <-- Text before this sentence is conversation history so far between you and me. Do NOT include timestamps in responses, timestamps provide context for when this conversation is taking place. responses will be spoken back to user using TTS. Using this information and context, answer the following question, calling functions if asked current information -->  "${theStuff}"`,
+        text: `${updatedHistory} <-- ${instruction} -->  "${theStuff}"`,
         code: apiKey,
       };
 
diff --git a/src/hooks/useSpeech.js b/src/hooks/useSpeech.js
index 5d0c724..ad9439a 100644
--- a/src/hooks/useSpeech.js
+++ b/src/hooks/useSpeech.js
@@ -73,7 +73,12 @@ export const useSpeech = (setRez, handleGreeting, setEnteredText) => {
       return text.replace(urlPattern, '');
     }
 
-    text = removeUrls(text);
+    text = removeUrls(text || "");
+    if (!text.trim()) {
+      setShowPlayPause(false);
+      setIsPlaying(false);
+      return;
+    }
     setShowPlayPause(true);
 
     if (typeof window !== 'undefined' && "speechSynthesis" in window) {
@@ -138,9 +143,12 @@ export const useSpeech = (setRez, handleGreeting, setEnteredText) => {
             .replaceAll('?', '')
             .replaceAll(":", "")
         );
-
         const voices = speechSynthesis.getVoices();
-        utterance.voice = voices[5] || voices[0] || null;
+        const preferred = voices.find(v => /en/i.test(v.lang) && /(Google US|Samantha|Microsoft|Female|Natural)/i.test(v.name))
+          || voices.find(v => /en/i.test(v.lang))
+          || voices[0];
+        if (preferred) utterance.voice = preferred;
+        utterance.rate = 1.0;
         utterance.onend = synthesizeSegments;
         speechSynthesis.speak(utterance);
         setIsPlaying(true);
@@ -148,7 +156,11 @@ export const useSpeech = (setRez, handleGreeting, setEnteredText) => {
 
       // Ensure voices are loaded before starting synthesis
       if (speechSynthesis.getVoices().length === 0) {
-        speechSynthesis.onvoiceschanged = () => synthesizeSegments();
+        const handler = () => {
+          synthesizeSegments();
+          speechSynthesis.onvoiceschanged = null;
+        };
+        speechSynthesis.onvoiceschanged = handler;
       } else {
         synthesizeSegments();
       }
